probability_cutoff = 0.99
treeWAS_associations = treeWAS_variants[ PosteriorProtective >= probability_cutoff | PosteriorRisk >= probability_cutoff ]
idx = treeWAS_associations %>%
duplicated(by = "VariantID")
write_csv(data.frame(treeWAS_associations[idx]),paste0("../results/treeWAS_associations.csv"))
get_VEP("rs1383264")
result = get_VEP("rs1383264")
View(result)
View(result[[2]][[1]])
View(result[[11]][[1]])
View(result[[11]][[2]])
treeWAS_associations
treeWAS_associations$VariantID[1]
get_VEP(treeWAS_associations$VariantID[1])
get_VEP(treeWAS_associations$VariantID[2])
view(result)
result = get_VEP(treeWAS_associations$VariantID[3])
view(result)
result = get_VEP(treeWAS_associations$VariantID[4])
view(result)
View((structure(list(start = list(15414907L), most_severe_consequence = list(     "intron_variant"), input = list("rs12136606"), transcript_consequences = list(     structure(list(gene_id = list("ENSG00000142634", "ENSG00000142634"),          impact = list("MODIFIER", "MODIFIER"), consequence_terms = list(             structure("intron_variant", .Dim = c(1L, 1L)), structure("intron_variant", .Dim = c(1L,              1L))), strand = list(1L, 1L), biotype = list("protein_coding",              "protein_coding"), hgnc_id = list("HGNC:28670", "HGNC:28670"),          gene_symbol = list("EFHD2", "EFHD2"), transcript_id = list(             "ENST00000375980", "ENST00000445566"), gene_symbol_source = list(             "HGNC", "HGNC"), variant_allele = list("T", "T"),          flags = list(NULL, structure("cds_start_NF", .Dim = c(1L,          1L)))), class = "data.frame", row.names = 1:2)), allele_string = list(     "C/T"), assembly_name = list("GRCh38"), end = list(15414907L),      colocated_variants = list(structure(list(strand = list(1L),          id = list("rs12136606"), frequencies = structure(list(             T = structure(list(eur = list(0.0149), sas = list(                 0.0133), afr = list(0L), eas = list(0.002), amr = list(                 0.0029)), class = "data.frame", row.names = 1L)), class = "data.frame", row.names = 1L),          minor_allele_freq = list(0.0064), allele_string = list(             "C/T"), seq_region_name = list("1"), minor_allele = list(             "T"), end = list(15414907L), start = list(15414907L)), class = "data.frame", row.names = 1L)),      id = list("rs12136606"), seq_region_name = list("1"), strand = list(         1L)), class = "data.frame", row.names = 1L))[[4]][[1]])
results
result
View(result)
View(result[[4]][[1]])
View((structure(list(start = list(15414907L), most_severe_consequence = list(     "intron_variant"), input = list("rs12136606"), transcript_consequences = list(     structure(list(gene_id = list("ENSG00000142634", "ENSG00000142634"),          impact = list("MODIFIER", "MODIFIER"), consequence_terms = list(             structure("intron_variant", .Dim = c(1L, 1L)), structure("intron_variant", .Dim = c(1L,              1L))), strand = list(1L, 1L), biotype = list("protein_coding",              "protein_coding"), hgnc_id = list("HGNC:28670", "HGNC:28670"),          gene_symbol = list("EFHD2", "EFHD2"), transcript_id = list(             "ENST00000375980", "ENST00000445566"), gene_symbol_source = list(             "HGNC", "HGNC"), variant_allele = list("T", "T"),          flags = list(NULL, structure("cds_start_NF", .Dim = c(1L,          1L)))), class = "data.frame", row.names = 1:2)), allele_string = list(     "C/T"), assembly_name = list("GRCh38"), end = list(15414907L),      colocated_variants = list(structure(list(strand = list(1L),          id = list("rs12136606"), frequencies = structure(list(             T = structure(list(eur = list(0.0149), sas = list(                 0.0133), afr = list(0L), eas = list(0.002), amr = list(                 0.0029)), class = "data.frame", row.names = 1L)), class = "data.frame", row.names = 1L),          minor_allele_freq = list(0.0064), allele_string = list(             "C/T"), seq_region_name = list("1"), minor_allele = list(             "T"), end = list(15414907L), start = list(15414907L)), class = "data.frame", row.names = 1L)),      id = list("rs12136606"), seq_region_name = list("1"), strand = list(         1L)), class = "data.frame", row.names = 1L))[[4]][[1]])
result = get_VEP(treeWAS_associations$VariantID[5])
result
result = get_VEP(treeWAS_associations$VariantID[6])
result = get_VEP(treeWAS_associations$VariantID[7])
result = get_VEP(treeWAS_associations$VariantID[8])
result = get_VEP(treeWAS_associations$VariantID[11])
result = get_VEP(treeWAS_associations$VariantID[1])
view(result)
View((structure(list(end = list(32772190L, 32812740L, 32695886L, 32751348L,      32925943L, 32805969L, 32700892L, 32863804L), id = list("rs1383264",      "rs1383264", "rs1383264", "rs1383264", "rs1383264", "rs1383264",      "rs1383264", "rs1383264"), most_severe_consequence = list(     "intergenic_variant", "intergenic_variant", "intergenic_variant",      "intergenic_variant", "intergenic_variant", "intergenic_variant",      "intergenic_variant", "intergenic_variant"), start = list(     32772190L, 32812740L, 32695886L, 32751348L, 32925943L, 32805969L,      32700892L, 32863804L), intergenic_consequences = list(structure(list(     variant_allele = list("G", "T"), impact = list("MODIFIER",          "MODIFIER"), consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L)))), class = "data.frame", row.names = 1:2),      structure(list(consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L))),          impact = list("MODIFIER", "MODIFIER"), variant_allele = list(             "A", "G")), class = "data.frame", row.names = 1:2),      structure(list(impact = list("MODIFIER", "MODIFIER"), consequence_terms = list(         structure("intergenic_variant", .Dim = c(1L, 1L)), structure("intergenic_variant", .Dim = c(1L,          1L))), variant_allele = list("G", "T")), class = "data.frame", row.names = 1:2),      structure(list(variant_allele = list("A", "G"), consequence_terms = list(         structure("intergenic_variant", .Dim = c(1L, 1L)), structure("intergenic_variant", .Dim = c(1L,          1L))), impact = list("MODIFIER", "MODIFIER")), class = "data.frame", row.names = 1:2),      structure(list(variant_allele = list("G", "T"), impact = list(         "MODIFIER", "MODIFIER"), consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L)))), class = "data.frame", row.names = 1:2),      structure(list(consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L))),          impact = list("MODIFIER", "MODIFIER"), variant_allele = list(             "A", "G")), class = "data.frame", row.names = 1:2),      structure(list(consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L))),          impact = list("MODIFIER", "MODIFIER"), variant_allele = list(             "G", "T")), class = "data.frame", row.names = 1:2),      structure(list(consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L))),          impact = list("MODIFIER", "MODIFIER"), variant_allele = list(             "G", "T")), class = "data.frame", row.names = 1:2)),      assembly_name = list("GRCh38", "GRCh38", "GRCh38", "GRCh38",          "GRCh38", "GRCh38", "GRCh38", "GRCh38"), strand = list(         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), input = list("rs1383264",          "rs1383264", "rs1383264", "rs1383264", "rs1383264", "rs1383264",          "rs1383264", "rs1383264"), colocated_variants = list(         structure(list(seq_region_name = list("6"), frequencies = structure(list(             T = structure(list(eur = list(0.6292), sas = list(                 0.8538), afr = list(0.5651), eas = list(0.8353),                  amr = list(0.611)), class = "data.frame", row.names = 1L)), class = "data.frame", row.names = 1L),              strand = list(1L), start = list(32772190L), minor_allele = list(                 "A"), allele_string = list("A/G/T"), minor_allele_freq = list(                 0.3049), id = list("rs1383264"), end = list(32772190L)), class = "data.frame", row.names = 1L),          structure(list(end = list(32812740L), id = list("rs1383264"),              minor_allele_freq = list(0.3049), allele_string = list(                 "T/A/G"), minor_allele = list("A"), start = list(                 32812740L), strand = list(1L), seq_region_name = list(                 "CHR_HSCHR6_MHC_APD_CTG1")), class = "data.frame", row.names = 1L),          structure(list(minor_allele = list("A"), start = list(             32695886L), strand = list(1L), seq_region_name = list(             "CHR_HSCHR6_MHC_COX_CTG1"), end = list(32695886L),              id = list("rs1383264"), minor_allele_freq = list(                 0.3049), allele_string = list("A/G/T")), class = "data.frame", row.names = 1L),          structure(list(allele_string = list("T/A/G"), minor_allele_freq = list(             0.3049), end = list(32751348L), id = list("rs1383264"),              seq_region_name = list("CHR_HSCHR6_MHC_DBB_CTG1"),              minor_allele = list("A"), start = list(32751348L),              strand = list(1L)), class = "data.frame", row.names = 1L),          structure(list(allele_string = list("A/G/T"), minor_allele_freq = list(             0.3049), end = list(32925943L), id = list("rs1383264"),              seq_region_name = list("CHR_HSCHR6_MHC_MANN_CTG1"),              minor_allele = list("A"), start = list(32925943L),              strand = list(1L)), class = "data.frame", row.names = 1L),          structure(list(end = list(32805969L), id = list("rs1383264"),              allele_string = list("T/A/G"), minor_allele_freq = list(                 0.3049), minor_allele = list("A"), start = list(                 32805969L), strand = list(1L), seq_region_name = list(                 "CHR_HSCHR6_MHC_MCF_CTG1")), class = "data.frame", row.names = 1L),          structure(list(strand = list(1L), minor_allele = list(             "A"), start = list(32700892L), seq_region_name = list(             "CHR_HSCHR6_MHC_QBL_CTG1"), end = list(32700892L),              id = list("rs1383264"), allele_string = list("A/G/T"),              minor_allele_freq = list(0.3049)), class = "data.frame", row.names = 1L),          structure(list(seq_region_name = list("CHR_HSCHR6_MHC_SSTO_CTG1"),              strand = list(1L), start = list(32863804L), minor_allele = list(                 "A"), minor_allele_freq = list(0.3049), allele_string = list(                 "A/G/T"), id = list("rs1383264"), end = list(                 32863804L)), class = "data.frame", row.names = 1L)),      allele_string = list("A/G/T", "T/A/G", "A/G/T", "T/A/G",          "A/G/T", "T/A/G", "A/G/T", "A/G/T"), seq_region_name = list(         "6", "CHR_HSCHR6_MHC_APD_CTG1", "CHR_HSCHR6_MHC_COX_CTG1",          "CHR_HSCHR6_MHC_DBB_CTG1", "CHR_HSCHR6_MHC_MANN_CTG1",          "CHR_HSCHR6_MHC_MCF_CTG1", "CHR_HSCHR6_MHC_QBL_CTG1",          "CHR_HSCHR6_MHC_SSTO_CTG1")), class = "data.frame", row.names = c(NA,  8L)))[[5]][[1]])
View((structure(list(end = list(32772190L, 32812740L, 32695886L, 32751348L,      32925943L, 32805969L, 32700892L, 32863804L), id = list("rs1383264",      "rs1383264", "rs1383264", "rs1383264", "rs1383264", "rs1383264",      "rs1383264", "rs1383264"), most_severe_consequence = list(     "intergenic_variant", "intergenic_variant", "intergenic_variant",      "intergenic_variant", "intergenic_variant", "intergenic_variant",      "intergenic_variant", "intergenic_variant"), start = list(     32772190L, 32812740L, 32695886L, 32751348L, 32925943L, 32805969L,      32700892L, 32863804L), intergenic_consequences = list(structure(list(     variant_allele = list("G", "T"), impact = list("MODIFIER",          "MODIFIER"), consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L)))), class = "data.frame", row.names = 1:2),      structure(list(consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L))),          impact = list("MODIFIER", "MODIFIER"), variant_allele = list(             "A", "G")), class = "data.frame", row.names = 1:2),      structure(list(impact = list("MODIFIER", "MODIFIER"), consequence_terms = list(         structure("intergenic_variant", .Dim = c(1L, 1L)), structure("intergenic_variant", .Dim = c(1L,          1L))), variant_allele = list("G", "T")), class = "data.frame", row.names = 1:2),      structure(list(variant_allele = list("A", "G"), consequence_terms = list(         structure("intergenic_variant", .Dim = c(1L, 1L)), structure("intergenic_variant", .Dim = c(1L,          1L))), impact = list("MODIFIER", "MODIFIER")), class = "data.frame", row.names = 1:2),      structure(list(variant_allele = list("G", "T"), impact = list(         "MODIFIER", "MODIFIER"), consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L)))), class = "data.frame", row.names = 1:2),      structure(list(consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L))),          impact = list("MODIFIER", "MODIFIER"), variant_allele = list(             "A", "G")), class = "data.frame", row.names = 1:2),      structure(list(consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L))),          impact = list("MODIFIER", "MODIFIER"), variant_allele = list(             "G", "T")), class = "data.frame", row.names = 1:2),      structure(list(consequence_terms = list(structure("intergenic_variant", .Dim = c(1L,      1L)), structure("intergenic_variant", .Dim = c(1L, 1L))),          impact = list("MODIFIER", "MODIFIER"), variant_allele = list(             "G", "T")), class = "data.frame", row.names = 1:2)),      assembly_name = list("GRCh38", "GRCh38", "GRCh38", "GRCh38",          "GRCh38", "GRCh38", "GRCh38", "GRCh38"), strand = list(         1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), input = list("rs1383264",          "rs1383264", "rs1383264", "rs1383264", "rs1383264", "rs1383264",          "rs1383264", "rs1383264"), colocated_variants = list(         structure(list(seq_region_name = list("6"), frequencies = structure(list(             T = structure(list(eur = list(0.6292), sas = list(                 0.8538), afr = list(0.5651), eas = list(0.8353),                  amr = list(0.611)), class = "data.frame", row.names = 1L)), class = "data.frame", row.names = 1L),              strand = list(1L), start = list(32772190L), minor_allele = list(                 "A"), allele_string = list("A/G/T"), minor_allele_freq = list(                 0.3049), id = list("rs1383264"), end = list(32772190L)), class = "data.frame", row.names = 1L),          structure(list(end = list(32812740L), id = list("rs1383264"),              minor_allele_freq = list(0.3049), allele_string = list(                 "T/A/G"), minor_allele = list("A"), start = list(                 32812740L), strand = list(1L), seq_region_name = list(                 "CHR_HSCHR6_MHC_APD_CTG1")), class = "data.frame", row.names = 1L),          structure(list(minor_allele = list("A"), start = list(             32695886L), strand = list(1L), seq_region_name = list(             "CHR_HSCHR6_MHC_COX_CTG1"), end = list(32695886L),              id = list("rs1383264"), minor_allele_freq = list(                 0.3049), allele_string = list("A/G/T")), class = "data.frame", row.names = 1L),          structure(list(allele_string = list("T/A/G"), minor_allele_freq = list(             0.3049), end = list(32751348L), id = list("rs1383264"),              seq_region_name = list("CHR_HSCHR6_MHC_DBB_CTG1"),              minor_allele = list("A"), start = list(32751348L),              strand = list(1L)), class = "data.frame", row.names = 1L),          structure(list(allele_string = list("A/G/T"), minor_allele_freq = list(             0.3049), end = list(32925943L), id = list("rs1383264"),              seq_region_name = list("CHR_HSCHR6_MHC_MANN_CTG1"),              minor_allele = list("A"), start = list(32925943L),              strand = list(1L)), class = "data.frame", row.names = 1L),          structure(list(end = list(32805969L), id = list("rs1383264"),              allele_string = list("T/A/G"), minor_allele_freq = list(                 0.3049), minor_allele = list("A"), start = list(                 32805969L), strand = list(1L), seq_region_name = list(                 "CHR_HSCHR6_MHC_MCF_CTG1")), class = "data.frame", row.names = 1L),          structure(list(strand = list(1L), minor_allele = list(             "A"), start = list(32700892L), seq_region_name = list(             "CHR_HSCHR6_MHC_QBL_CTG1"), end = list(32700892L),              id = list("rs1383264"), allele_string = list("A/G/T"),              minor_allele_freq = list(0.3049)), class = "data.frame", row.names = 1L),          structure(list(seq_region_name = list("CHR_HSCHR6_MHC_SSTO_CTG1"),              strand = list(1L), start = list(32863804L), minor_allele = list(                 "A"), minor_allele_freq = list(0.3049), allele_string = list(                 "A/G/T"), id = list("rs1383264"), end = list(                 32863804L)), class = "data.frame", row.names = 1L)),      allele_string = list("A/G/T", "T/A/G", "A/G/T", "T/A/G",          "A/G/T", "T/A/G", "A/G/T", "A/G/T"), seq_region_name = list(         "6", "CHR_HSCHR6_MHC_APD_CTG1", "CHR_HSCHR6_MHC_COX_CTG1",          "CHR_HSCHR6_MHC_DBB_CTG1", "CHR_HSCHR6_MHC_MANN_CTG1",          "CHR_HSCHR6_MHC_MCF_CTG1", "CHR_HSCHR6_MHC_QBL_CTG1",          "CHR_HSCHR6_MHC_SSTO_CTG1")), class = "data.frame", row.names = c(NA,  8L)))[[5]][[1]])
0
)
view(result)
View(result[[5]][[1]])
View(result[[5]][[2]])
View(result[[5]][[1]])
paste(treeWAS_associations$VariantID, collapse = ", ")
paste('"',treeWAS_associations$VariantID,'"', collapse = ", ")
paste('"',treeWAS_associations$VariantID,'"', sep = "", collapse = ", ")
treeWAS_associations$VariantID
paste('"',treeWAS_associations$VariantID,'"', collapse = ", ")
paste('"',treeWAS_associations$VariantID, collapse = ", ")
paste(treeWAS_associations$VariantID, collapse = ", ")
paste(""",treeWAS_associations$VariantID, collapse = ", ")
paste('"',treeWAS_associations$VariantID, collapse = ", ")
paste('"',treeWAS_associations$VariantID, sep = "", collapse = ", ")
paste('\"',treeWAS_associations$VariantID, sep = "", collapse = ", ")
paste('"',treeWAS_associations$VariantID, '"',sep = "", collapse = ", ")
cat(paste('"',treeWAS_associations$VariantID, '"',sep = "", collapse = ", "))
paste('{ "ids" : [',
cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),
' ] }')
paste('{ "ids" : [',
cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", "))
)
paste('{ "ids" : [')
cat(paste('{ "ids" : ['))
paste0('{ "ids" : [',
cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),
' ] }') )
paste0('{ "ids" : [',
cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),
' ] }') )
paste0('{ "ids" : [',
cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),
' ] }')
paste0('{ "ids" : [',cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),' ] }')
paste('{ "ids" : [',cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),' ] }')
paste('{ "ids" : [',cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),' ] }')
paste(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),' ] }')
paste(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),cat(' ] }'))
paste(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")),' ] }')
paste(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }'))
paste0(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }'))
paste0(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }'),sep="")
cat(paste0(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }') )
)
cat(paste0(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }') ) )
body = cat(paste0(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }') ) )
body
body = paste0(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }') )
body
body = paste0(cat('{ "ids" : ['),cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }') )
body
?paste0
body = paste0('{ "ids" : [',cat(paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", ")), cat(' ] }') )
?cat
body = paste0('{ "ids" : [',paste('"',treeWAS_associations$VariantID[1:100], '"',sep = "", collapse = ", "), ' ] }')
body
cat(body)
v = cat(body)
v
knitr::opts_chunk$set(echo = TRUE)
require(tidyverse)
data_directory = "../data/"
filepaths = list.files(path = data_directory, pattern = glob2rx("^GSM*.txt") )
filepaths = list.files(path = data_directory, pattern = glob2rx("*.tsv") )
filepaths
combined_samples = tibble()
path =filepaths[1]
samp = read_tsv(paste0(data_directory,path))
samp
path
sample_name = strsplit(path,".")[[1]][1]
sampmle_na
sample_name
strsplit(path,".")
path
?strsplit
strsplit(path,".", fixed = TRUE)
strsplit(path,".", fixed = TRUE)[[1]]
strsplit(path,".", fixed = TRUE)[[1]][1]
sample_name = strsplit(path,".",fixed=TRUE)[[1]][1]
data_directory = "../data/"
filepaths = list.files(path = data_directory, pattern = glob2rx("*.tsv") )
combined_samples = tibble()
for (path in filepaths)
{
samp = read_tsv(paste0(data_directory,path))
TPM =
samp %>%
select(target_id,tpm)
sample_name = strsplit(path,".",fixed=TRUE)[[1]][1]
if (!is_empty(combined_samples) )
{
combined_samples = add_column(combined_samples, corrected_sample[,2])
} else
{ combined_samples = corrected_sample}
colnames(combined_samples)[ncol(combined_samples)] = sample_name
}
data_directory = "../data/"
filepaths = list.files(path = data_directory, pattern = glob2rx("*.tsv") )
combined_samples = tibble()
for (path in filepaths)
{
samp = read_tsv(paste0(data_directory,path))
TPM =
samp %>%
select(target_id,tpm)
sample_name = strsplit(path,".",fixed=TRUE)[[1]][1]
if (!is_empty(combined_samples) )
{
combined_samples = add_column(combined_samples, TPM[,2])
} else
{ combined_samples = TPM}
colnames(combined_samples)[ncol(combined_samples)] = sample_name
}
combined_samples
sample_expression = transpose_tibble(combined_samples, row.names = "TranscriptID", col_label = "sample_id")
require(RAPTR)
sample_expression = RAPTR::transpose_tibble(combined_samples, row.names = "TranscriptID", col_label = "sample_id")
library(RAPTR)
?corner
?transpose_tibble
library(devtools)
build("~/Documents/reference/RAPTR/")
library(RAPTR)
require(RAPTR)
install("~/Documents/reference/RAPTR/")
library(RAPTR)
?tranpose_tibble
?transpose_tibble
?corner
transpose_tibble = function(tbl,row.names = NA, col_label = "colnames")
{
if (!is.na(row.names))
{
mat = as.matrix(tbl %>% select(-row.names))
row.names = tbl %>% select(row.names) %>% pull()
rownames(mat) = row.names
}
else
{
mat= as.matrix(tbl)
#col.names = colnames(tbl)
}
col.names = colnames(mat)
t_tbl = as_tibble(t(mat))
t_tbl = t_tbl %>% add_column(!!col_label := col.names,.before = 1)
return(t_tbl)
}
sample_expression = RAPTR::transpose_tibble(combined_samples, row.names = "TranscriptID", col_label = "sample_id")
rm(list = ls())
data_directory = "../data/"
filepaths = list.files(path = data_directory, pattern = glob2rx("*.tsv") )
combined_samples = tibble()
for (path in filepaths)
{
samp = read_tsv(paste0(data_directory,path))
TPM =
samp %>%
select(target_id,tpm)
sample_name = strsplit(path,".",fixed=TRUE)[[1]][1]
if (!is_empty(combined_samples) )
{
combined_samples = add_column(combined_samples, TPM[,2])
} else
{ combined_samples = TPM}
colnames(combined_samples)[ncol(combined_samples)] = sample_name
}
source('~/Documents/reference/RAPTR/R/transpose_tibble.R', echo=TRUE)
sample_expression = transpose_tibble(combined_samples, row.names = "TranscriptID", col_label = "sample_id")
combined_samples
sample_expression = transpose_tibble(combined_samples, row.names = "target_id", col_label = "sample_id")
sample_expression
sample_expression %>% select_if(any)
warnings()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximport")
library(tximport)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ensembldb")
install.packages("reticulate")
library(ensembldb)
?gather
sample_expression
IL4_tx = c("ENSMUST00000000889.6", "ENSMUST00000150568.7", "ENSMUST00000140684.7", "ENSMUST00000127858.1")
IL5_tx = c("ENSMUST00000048605.2")
IL13_tx = c("ENSMUST00000020650.1")
CCL17_tx = c("ENST00000219244.9","ENST00000616880.1")
CCL22_tx = c("ENSMUST00000034231.3","ENSMUST00000156137.1")
for (tx in IL4_tx) { plot_transcript_expression(sample_expression,IL4_tx)}
plot_transcript_expression = function(expression,transcript)
{
plt =
expression %>%
select(transcript) %>%
ggplot(aes_string(x = "sample_id", y = transcript)) + geom_boxplot() + geom_jitter(size = 2, width = 0.125) +
ylab(paste0(transcript, "(TPM)")) + xlab("") + theme_bw() + theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16))
return(plt)
}
for (tx in IL4_tx) { plot_transcript_expression(sample_expression,IL4_tx)}
for (tx in IL4_tx) { plot_transcript_expression(sample_expression,tx)}
for (tx in IL4_tx) { print(plot_transcript_expression(sample_expression,tx))}
head(sample_expression)
tx
sample_expression %>% select(tx)
plot_transcript_expression = function(expression,transcript)
{
plt =
expression %>%
select(sample_id,transcript) %>%
ggplot(aes_string(x = "sample_id", y = transcript)) + geom_boxplot() + geom_jitter(size = 2, width = 0.125) +
ylab(paste0(transcript, "(TPM)")) + xlab("") + theme_bw() + theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16))
return(plt)
}
for (tx in IL4_tx) { print(plot_transcript_expression(sample_expression,tx))}
sample_expression %>% separate(sample_id, c("sample","replicate"),sep = "_")
sample_expression %>% separate(sample_id, c("sample","replicate"),sep = "_")
sample_expression
library(RAPTR)
sample_expression$sample_id
stsplit(sample_expression$sample_id,"_")
strsplit(sample_expression$sample_id,"_")
unlist(strsplit(sample_expression$sample_id,"_"))
strsplit(sample_expression$sample_id,"_")[1]
strsplit(sample_expression$sample_id,"_")
sample_expression =
transpose_tibble(combined_samples, row.names = "target_id", col_label = "sample_id") %>%
sapply(strsplit(sample_expression$sample_id,"_"),`[`,1)
sapply(strsplit(sample_expression$sample_id,"_"),`[`,1)
sample_expression$sample_id = sapply(strsplit(sample_expression$sample_id,"_"),`[`,1)
for (tx in IL4_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in IL5_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in IL13_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in CCL17_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in CCL22_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in CCL22_tx) { print(plot_transcript_expression(sample_expression,tx))}
plot_transcript_expression = function(expression,transcript)
{
plt =
expression %>%
select(sample_id,transcript) %>%
ggplot(aes_string(x = "sample_id", y = transcript)) + geom_boxplot() + geom_jitter(size = 2, width = 0.125, height = .001) +
ylab(paste0(transcript, "(TPM)")) + xlab("") + theme_bw() + theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.title.y = element_text(size = 16))
return(plt)
}
for (tx in CCL22_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in CCL22_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in CCL17_tx) { print(plot_transcript_expression(sample_expression,tx))}
CCL17_tx = c("ENST00000616880.1")
for (tx in CCL17_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in IL4_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in IL5_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in IL13_tx) { print(plot_transcript_expression(sample_expression,tx))}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
library(AnnotationDbi)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
library(AnnotationDbi)
install.packages("vctrs")
install.packages("vctrs")
library(AnnotationDbi)
?AnnotationDb
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
knitr::opts_chunk$set(echo = TRUE)
IL4_tx = c("ENSMUST00000000889.6", "ENSMUST00000150568.7", "ENSMUST00000140684.7", "ENSMUST00000127858.1")
IL5_tx = c("ENSMUST00000048605.2")
IL13_tx = c("ENSMUST00000020650.1")
CCL17_tx = c("ENST00000219244.9","ENST00000616880.1")
CCL22_tx = c("ENSMUST00000034231.3","ENSMUST00000156137.1")
for (tx in CCL17_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in CCL22_tx) { print(plot_transcript_expression(sample_expression,tx))}
for (tx in CCL22_tx) { print(plot_transcript_expression(sample_expression,tx))}
filepaths
tximport( files = filepaths, type "kallisto")
file.path(data_directory)
file.path(filepaths)
filepaths
tximport( files = paste0(data_directory,filepaths), type "kallisto")
paste0(data_directory,filepaths)
?tximport
library(tximport)
tximport( files = paste0(data_directory,filepaths), type "kallisto")
?tximport
paste0(data_directory,filepaths)
tximport( files = paste0(data_directory,filepaths), type = "kallisto")
data_directory = "../data/"
filepaths = list.files(path = data_directory, pattern = glob2rx("*.h5") )
tximport( files = paste0(data_directory,filepaths), type = "kallisto"),
filepaths = list.files(path = data_directory, pattern = glob2rx("*.h5") )
filepaths
tximport( files = paste0(data_directory,filepaths), type = "kallisto")
paste0(data_directory,filepaths)
tximport( files = paste0(data_directory,filepaths), type = "kallisto")
install.packages(rhdf5)
install.packages("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rhdf5")
tximport( files = paste0(data_directory,filepaths), type = "kallisto")
vignette('txiimport')
vignette('tximport')
library(ensembldb)
?`ensemblVersion,EnsDb-method`
ensemblVersion()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ensembldb")
library(ensembldb)
tximport( files = paste0(data_directory,filepaths), type = "kallisto", txOut = FALSE)
tximport( files = paste0(data_directory,filepaths), type = "kallisto", txOut = TRUE)
tximport( files = paste0(data_directory,filepaths), type = "kallisto", txOut = TRUE)
library(tximportData)
dir <- system.file("extdata", package = "tximportData")
list.files(dir)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximportData")
source('~/.active-rstudio-document', echo=TRUE)
dir
list.files(dir)
files <- file.path(dir, "kallisto_boot", samples$run, "abundance.h5")
files <- file.path(dir, "kallisto_boot", samples$run, "abundance.h5")
samples <- read.table(file.path(dir, "samples.txt"), header = TRUE)
samples
files <- file.path(dir, "kallisto_boot", samples$run, "abundance.h5")
files
files <- file.path(dir, "kallisto_boot", samples$run, "abundance.h5")
names(files) <- paste0("sample", 1:6)
txi.kallisto <- tximport(files, type = "kallisto", txOut = TRUE)
txi.kallisto
View(txi.kallisto)
head(txi.kallisto$counts)
tximport( files = paste0(data_directory,filepaths), type = "kallisto", txOut = TRUE)
paste0(data_directory,filepaths)
files
?fetchTablesFromEnsembl
devtools::install("~/Documents/reference/RAPTR/")
library(RAPTR)
library("RAPTR")
update.packages()
setwd("~/Documents/reference/RAPTR/")
ls
setwd("..")
install("RAPTR")
library(devtools)
install("RAPTR")
library(RAPTR)
RAPTR::corner
setwd("RAPTR/")
library(roxygen2)
library("roxygen2")
document()
devtools::load_all(".")
devtools::build("~/Documents/reference/RAPTR/")
devtools::load_all("~/Documents/reference/RAPTR/")
?RAPTR::split_string
devtools::build("~/Documents/reference/RAPTR/")
devtools::load_all("~/Documents/reference/RAPTR/")
?RAPTR::split_string
?RAPTR::corner
devtools::build("~/Documents/reference/RAPTR/")
devtools::load_all("~/Documents/reference/RAPTR/")
?RAPTR::split_string
library("RAPTR")
library("~/Documents/reference/RAPTR")
library("~/Documents/reference/RAPTR/")
library("RAPTR")
devtools::build("~/Documents/reference/RAPTR/")
devtools::install("~/Documents/reference/RAPTR/")
library(RAPTR)
RAPTR::corner
?RAPTR::corner
load_all(RAPTR)
devtools::load_all(RAPTR)
devtools::load_all("RAPTR")
devtools::load_all("~/Documents/reference/RAPTR")
?RAPTR::corner
?RAPTR::split_string
devtools::document("~/Documents/reference/RAPTR/")
getwd()
devtools::uses_testthat()
devtools::uses_testthat("../RAPTR")
devtools::use_testthat()
getwd()
devtools::use_testthat()
usethis::use_testthat()
split_string("abc.def.ghi",sep_char = ".")
split_string("abc,def,ghi",sep_char = ",")
split_string("abc,def,ghi",sep_char = ",", return_position = 2)
split_string("abc,def,ghi",sep_char = ",", return_position = 3)
split_string("abc,def,ghi",sep_char = ".", return_position = 3)
?strsplit
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::test()
?string_split
?RAPTR::string_split
library(RAPTR)
library("RAPTR")
?RAPTR::string_split
devtools::document()
devtools::check()
library(devtools)
use_package("affy")
install.packages("affy")
BiocManager::install("affy")
use_package("affy")
install()
RAPTR::import_CEL()
?import_CEL
document()
install()
?import_CEL
>transpose_tibble()
>transpose_tibble
?transpose_tibble
document()
check()
install()
library(affy)
install()
install()
?RAPTR::import_CEL
devtools::install_github("mkumar-rapttx/RAPTR")
RAPTR::transpose_tibble()
?RAPTR::transpose_tibble
x = as.matrix(randn(ncol = 10))
as.matrix(randn(50),ncol = 5)
as.matrix(rand(50),ncol = 5)
as.matrix(randu(50),ncol = 5)
as.matrix(rnorm(50),ncol = 5)
matrix(rnorm(50),ncol = 5)
library(tidyverse)
as_tibble(matrix(rnorm(50),ncol = 5))
as_tibble(matrix(rnorm(50),ncol = 5)) %>% transpose_tibble()
?dnorm
dnorm(seq(0,4, length=300), mean=0, sd=1)
seq(0,4, length=300)
?lapply
?rbindlist
?use_package
use_package(ggrepel)
usethis::use_package(ggrepel)
usethis::use_package("ggrepel")
devtools::document()
devtools::install()
library(devtools)
use_package("GEOquery")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
usethis::use_package("tidyverse")
?%>%
usethis::use_package("dplyr")
devtools::document()
devtools::install()
